#version 430 core

layout(local_size_x = 500,  local_size_y = 1, local_size_z = 1) in;

layout(std140, binding = 0) buffer Positions
{
    vec4 positions[];
};

layout(std140, binding = 1) buffer Velocities
{
    vec4 velocities[];
};

uniform int numParticles;
uniform float time;
uniform float deltaTime;

uniform vec3 attractor1Pos;
uniform float attractor1Gravity;

uniform vec3 attractor2Pos;
uniform float attractor2Gravity;

const float particleInvMass = 1.0 / 0.1;

void main()
{
    uint i = gl_GlobalInvocationID.x;

    if (i >= numParticles)
    {
        return;
    }

    vec3 p = positions[i].xyz;
    vec3 v = velocities[i].xyz;

    vec3 d1 = attractor1Pos - p;
    vec3 force1 = normalize(d1) * attractor1Gravity / length(d1);
    
    vec3 d2 = attractor2Pos - p;
    vec3 force2 = normalize(d2) * attractor2Gravity / length(d2);
    
    vec3 a = (force1 + force2) * particleInvMass;
    
    p += v * deltaTime + 0.5 * a * deltaTime * deltaTime;
    v += a * deltaTime;

    positions[i] = vec4(p, 1.0);
    velocities[i] = vec4(v, 0.0);
}
